class Solution {
public:
    int minDominoRotations(vector<int>& A, vector<int>& B) {
        int gsize = A.size();
        unordered_map<int, vector<int>> check;
        for(int i = 0; i < gsize; i++){
            check[A[i]].push_back(i);
        }
        for(int i = 0; i < gsize; i++){
            check[B[i]].push_back(i);
        }
        bool found;
        vector<int> res;
        for(auto it = check.begin(); it != check.end(); it++){
            found = true;
            for(int j = 0; j < gsize; j++){
                if(std::find(it->second.begin(), it->second.end(), j)
               == it->second.end()){
                    found = false;
                }
            }
            if(found == true){
                res.push_back(it->first);
            }
        }
        // if it cannot be done
        if(res.empty()) return -1;
        int Atimes, Btimes = 0;
        int minRes = INT_MAX;
        for(int i = 0; i < res.size(); i++){
            Atimes = 0;
            Btimes = 0;
            for(int j = 0; j < gsize; j++){
                if(A[j] == res[i]){
                    Atimes++;
                } 
                if(B[j] == res[i]){
                    Btimes++;
                }
            }
            minRes = min(minRes, min(min(gsize-Atimes, Atimes), min(gsize-Btimes, Btimes)));
        }
        return minRes;
    }
};
